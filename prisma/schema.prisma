generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  name             String
  email            String   @unique
  password         String
  submission_count Int      @default(500)
  isActivated      Boolean  @default(false)
  createdAt        DateTime @default(now())
  role             Role     @default(USER)
  response_count   Int      @default(0) // Track total responses received

  // Relations
  createdBy      Admin?  @relation(fields: [adminId], references: [id])
  adminId        String?
  activationCode String?

  // Forms Created by User
  forms       Form[]
  assignments AssignedForm[]

  passwordReset PasswordReset?
  responses     FormResponse[]

  // New Relation
  templates Template[]
  notifications Notification[]
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relations
  users User[]
}

model ActivationCode {
  id     String  @id @default(uuid())
  code   String  @unique
  isUsed Boolean @default(false)
}

model Form {
  id          String         @id @default(uuid())
  title       String
  subheading  String?
  createdBy   User           @relation(fields: [userId], references: [id])
  userId      String
  privacy     PrivacySetting @default(PUBLIC)
  blocks      Json
  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  favourite   Boolean        @default(false)

  // Assignments
  assignments AssignedForm[]
  responses   FormResponse[]
  notifications Notification[]
}

model AssignedForm {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  form   Form   @relation(fields: [formId], references: [id])
  formId String

  @@unique([userId, formId]) // Prevent duplicate assignments
}

model FormResponse {
  id          String   @id @default(uuid())
  form        Form     @relation(fields: [formId], references: [id])
  formId      String
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  responses   Json // Stores answers in JSON format
  submittedAt DateTime @default(now())
  @@index([formId])
  @@index([userId])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  otp       String
  otpExpiry DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id         String         @id @default(uuid())
  title      String
  subheading String?
  privacy    PrivacySetting @default(PUBLIC)
  blocks     Json
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relationships
  createdBy User   @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  message   String
  isRead    Boolean  @default(false)
  formId    String?  // Optional reference to a form
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  form      Form?    @relation(fields: [formId], references: [id])

  @@index([userId])
}

enum Role {
  USER
  ADMIN
}

enum FormRole {
  VIEWER
  EDITOR
}

enum PrivacySetting {
  PRIVATE
  PUBLIC
  READ_ONLY
}

enum NotificationType {
  FORM_ASSIGNED
  FORM_SUBMITTED
  FORM_UPDATED
  COMMENT_ADDED
  COUNT_INCREASED
  STATUS_CHANGED
}
