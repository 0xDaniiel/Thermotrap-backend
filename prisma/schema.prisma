generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  isActivated Boolean  @default(false)
  createdAt   DateTime @default(now())
  role        Role     @default(USER)

  // Relations
  createdBy Admin?  @relation(fields: [adminId], references: [id])
  adminId   String?

  // Forms Created by User
  forms       Form[]
  assignments FormAssignment[]

  passwordReset PasswordReset?
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relations
  users User[]
}

model ActivationCode {
  id     String  @id @default(uuid())
  code   String  @unique
  isUsed Boolean @default(false)
  userId String? @unique
}

model Form {
  id          String   @id @default(uuid())
  title       String
  subheading  String?   
  createdBy   User     @relation(fields: [userId], references: [id])
  userId      String
  privacy     PrivacySetting @default(PUBLIC)  
  blocks      Json    
  isPublished Boolean  @default(false) 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Assignments
  assignments FormAssignment[]
}




model FormAssignment {
  id     String   @id @default(uuid())
  form   Form     @relation(fields: [formId], references: [id])
  formId String
  user   User     @relation(fields: [userId], references: [id])
  userId String
  role   FormRole

  assignedAt DateTime @default(now())
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  otp       String
  otpExpiry DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum FormRole {
  VIEWER
  EDITOR
}


enum PrivacySetting {
  PRIVATE
  PUBLIC
  READ_ONLY
}